'''
Created on Nov 4, 2010
Chapter 5 source file for Machine Learing in Action
@author: Peter
'''
import numpy as np
from time import sleep

def loadDataSet(fileName):
    dataMat = []; labelMat = []
    fr = open(fileName)
    for line in fr.readlines():
        lineArr = line.strip().split('\t')
        dataMat.append([float(lineArr[0]), float(lineArr[1])])
        labelMat.append(float(lineArr[2]))
    return dataMat,labelMat

def selectJrand(i,m):
    j=i #we want to select any J not equal to i
    while (j==i):
        j = int(np.random.uniform(0,m))
    return j

def clipAlpha(aj,H,L):
    if aj > H: 
        aj = H
    if L > aj:
        aj = L
    return aj

def smoSimple(dataMatIn, classLabels, C, toler, maxIter):
    dataMatrix = np.mat(dataMatIn); labelMat = np.mat(classLabels).transpose()    #print dataMatrix.shape,labelMat.shape
    b = 0; m,n = np.shape(dataMatrix)
    alphas = np.mat(np.zeros((m,1)))
    iter = 0
    while (iter < maxIter):
        alphaPairsChanged = 0
        for i in range(m):            #print np.multiply(alphas,labelMat).T.shape            #print (dataMatrix*dataMatrix[i,:].T).shape
            fXi = float(np.multiply(alphas,labelMat).T*(dataMatrix*dataMatrix[i,:].T)) + b
            Ei = fXi - float(labelMat[i])#if checks if an example violates KKT conditions
            if ((labelMat[i]*Ei < -toler) and (alphas[i] < C)) or ((labelMat[i]*Ei > toler) and (alphas[i] > 0)):
                j = selectJrand(i,m)
                fXj = float(np.multiply(alphas,labelMat).T*(dataMatrix*dataMatrix[j,:].T)) + b
                Ej = fXj - float(labelMat[j])
                alphaIold = alphas[i].copy(); alphaJold = alphas[j].copy();
                if (labelMat[i] != labelMat[j]):
                    L = max(0, alphas[j] - alphas[i])
                    H = min(C, C + alphas[j] - alphas[i])
                else:
                    L = max(0, alphas[j] + alphas[i] - C)
                    H = min(C, alphas[j] + alphas[i])
                if L==H: print "L==H"; continue
                eta = 2.0 * dataMatrix[i,:]*dataMatrix[j,:].T - dataMatrix[i,:]*dataMatrix[i,:].T - dataMatrix[j,:]*dataMatrix[j,:].T
                if eta >= 0: print "eta>=0"; continue
                alphas[j] -= labelMat[j]*(Ei - Ej)/eta
                alphas[j] = clipAlpha(alphas[j],H,L)
                if (abs(alphas[j] - alphaJold) < 0.00001): print "j not moving enough"; continue
                alphas[i] += labelMat[j]*labelMat[i]*(alphaJold - alphas[j])#update i by the same amount as j
                                                                        #the update is in the oppostie direction
                b1 = b - Ei- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i,:]*dataMatrix[i,:].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[i,:]*dataMatrix[j,:].T
                b2 = b - Ej- labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i,:]*dataMatrix[j,:].T - labelMat[j]*(alphas[j]-alphaJold)*dataMatrix[j,:]*dataMatrix[j,:].T
                if (0 < alphas[i]) and (C > alphas[i]): b = b1
                elif (0 < alphas[j]) and (C > alphas[j]): b = b2
                else: b = (b1 + b2)/2.0
                alphaPairsChanged += 1
                print "iter: %d i:%d, pairs changed %d" % (iter,i,alphaPairsChanged)
        if (alphaPairsChanged == 0): iter += 1
        else: iter = 0
        print "iteration number: %d" % iter
    return b,alphasclass optStructK:    def __init__(self,dataMatIn, classLabels, C, toler, kTup):  # Initialize the structure with the parameters         self.X = dataMatIn        self.labelMat = classLabels        self.C = C        self.tol = toler        self.m = np.shape(dataMatIn)[0]        self.alphas = np.mat(np.zeros((self.m,1)))        self.b = 0        self.eCache = np.mat(np.zeros((self.m,2))) #first column is valid flag                #""" knrnel                self.K = np.mat(np.zeros((self.m,self.m)))        for i in range(self.m):            self.K[:,i] = kernelTrans(self.X, self.X[i,:], kTup)                #"""        def calcEkK(oS, k):    fXk = float(np.multiply(oS.alphas,oS.labelMat).T*(oS.X*oS.X[k,:].T)) + oS.b    Ek = fXk - float(oS.labelMat[k])    return Ek        def selectJK(i, oS, Ei):         #this is the second choice -heurstic, and calcs Ej    maxK = -1; maxDeltaE = 0; Ej = 0    oS.eCache[i] = [1,Ei]  #set valid #choose the alpha that gives the maximum delta E    validEcacheList = np.nonzero(oS.eCache[:,0].A)[0]    if (len(validEcacheList)) > 1:        for k in validEcacheList:   #loop through valid Ecache values and find the one that maximizes delta E            if k == i: continue #don't calc for i, waste of time            Ek = calcEkK(oS, k)            deltaE = abs(Ei - Ek)            if (deltaE > maxDeltaE):                maxK = k; maxDeltaE = deltaE; Ej = Ek        return maxK, Ej    else:   #in this case (first time around) we don't have any valid eCache values        j = selectJrand(i, oS.m)        Ej = calcEkK(oS, j)    return j, Ejdef updateEkK(oS, k):#after any alpha has changed update the new value in the cache    Ek = calcEkK(oS, k)    oS.eCache[k] = [1,Ek]    def calcEk(oS, k):    fXk = float(np.multiply(oS.alphas,oS.labelMat).T*oS.K[:,k] + oS.b)    Ek = fXk - float(oS.labelMat[k])    return Ekdef innerLK(i, oS):    Ei = calcEk(oS, i)    if ((oS.labelMat[i]*Ei < -oS.tol) and (oS.alphas[i] < oS.C)) or ((oS.labelMat[i]*Ei > oS.tol) and (oS.alphas[i] > 0)):        j,Ej = selectJK(i, oS, Ei) #this has been changed from selectJrand        alphaIold = oS.alphas[i].copy(); alphaJold = oS.alphas[j].copy();        if (oS.labelMat[i] != oS.labelMat[j]):            L = max(0, oS.alphas[j] - oS.alphas[i])            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])        else:            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)            H = min(oS.C, oS.alphas[j] + oS.alphas[i])        if L==H: print "L==H"; return 0        eta = 2.0 * oS.K[i,j] - oS.K[i,i] - oS.K[j,j] #changed for kernel        if eta >= 0: print "eta>=0"; return 0        oS.alphas[j] -= oS.labelMat[j]*(Ei - Ej)/eta        oS.alphas[j] = clipAlpha(oS.alphas[j],H,L)        updateEkK(oS, j) #added this for the Ecache        if (abs(oS.alphas[j] - alphaJold) < 0.00001): print "j not moving enough"; return 0        oS.alphas[i] += oS.labelMat[j]*oS.labelMat[i]*(alphaJold - oS.alphas[j])#update i by the same amount as j        updateEkK(oS, i) #added this for the Ecache                    #the update is in the oppostie direction        b1 = oS.b - Ei- oS.labelMat[i]*(oS.alphas[i]-alphaIold)*oS.K[i,i] - oS.labelMat[j]*(oS.alphas[j]-alphaJold)*oS.K[i,j]        b2 = oS.b - Ej- oS.labelMat[i]*(oS.alphas[i]-alphaIold)*oS.K[i,j]- oS.labelMat[j]*(oS.alphas[j]-alphaJold)*oS.K[j,j]        if (0 < oS.alphas[i]) and (oS.C > oS.alphas[i]): oS.b = b1        elif (0 < oS.alphas[j]) and (oS.C > oS.alphas[j]): oS.b = b2        else: oS.b = (b1 + b2)/2.0        return 1    else: return 0def innerL(i, oS):    Ei = calcEkK(oS, i)    if ((oS.labelMat[i]*Ei < -oS.tol) and (oS.alphas[i] < oS.C)) or ((oS.labelMat[i]*Ei > oS.tol) and (oS.alphas[i] > 0)):        j,Ej = selectJK(i, oS, Ei) #this has been changed from selectJrand        alphaIold = oS.alphas[i].copy(); alphaJold = oS.alphas[j].copy();        if (oS.labelMat[i] != oS.labelMat[j]):            L = max(0, oS.alphas[j] - oS.alphas[i])            H = min(oS.C, oS.C + oS.alphas[j] - oS.alphas[i])        else:            L = max(0, oS.alphas[j] + oS.alphas[i] - oS.C)            H = min(oS.C, oS.alphas[j] + oS.alphas[i])        if L==H: print "L==H"; return 0        eta = 2.0 * oS.X[i,:]*oS.X[j,:].T - oS.X[i,:]*oS.X[i,:].T - oS.X[j,:]*oS.X[j,:].T        if eta >= 0: print "eta>=0"; return 0        oS.alphas[j] -= oS.labelMat[j]*(Ei - Ej)/eta        oS.alphas[j] = clipAlpha(oS.alphas[j],H,L)        updateEkK(oS, j) #added this for the Ecache        if (abs(oS.alphas[j] - alphaJold) < 0.00001): print "j not moving enough"; return 0        oS.alphas[i] += oS.labelMat[j]*oS.labelMat[i]*(alphaJold - oS.alphas[j])#update i by the same amount as j        updateEkK(oS, i) #added this for the Ecache                    #the update is in the oppostie direction        b1 = oS.b - Ei- oS.labelMat[i]*(oS.alphas[i]-alphaIold)*oS.X[i,:]*oS.X[i,:].T - oS.labelMat[j]*(oS.alphas[j]-alphaJold)*oS.X[i,:]*oS.X[j,:].T        b2 = oS.b - Ej- oS.labelMat[i]*(oS.alphas[i]-alphaIold)*oS.X[i,:]*oS.X[j,:].T - oS.labelMat[j]*(oS.alphas[j]-alphaJold)*oS.X[j,:]*oS.X[j,:].T        if (0 < oS.alphas[i]) and (oS.C > oS.alphas[i]): oS.b = b1        elif (0 < oS.alphas[j]) and (oS.C > oS.alphas[j]): oS.b = b2        else: oS.b = (b1 + b2)/2.0        return 1    else: return 0def smoPK(dataMatIn, classLabels, C, toler, maxIter):    #full Platt SMO    oS = optStructK(np.mat(dataMatIn),np.mat(classLabels).transpose(),C,toler)    iter = 0    entireSet = True; alphaPairsChanged = 0    while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)):        alphaPairsChanged = 0        if entireSet:   #go over all            for i in range(oS.m):                        alphaPairsChanged += innerLK(i,oS)                print "fullSet, iter: %d i:%d, pairs changed %d" % (iter,i,alphaPairsChanged)            iter += 1        else:#go over non-bound (railed) alphas            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]            for i in nonBoundIs:                alphaPairsChanged += innerLK(i,oS)                print "non-bound, iter: %d i:%d, pairs changed %d" % (iter,i,alphaPairsChanged)            iter += 1        if entireSet: entireSet = False #toggle entire set loop        elif (alphaPairsChanged == 0): entireSet = True          print "iteration number: %d" % iter    return oS.b,oS.alphas"""def kernelTrans(X, A, kTup): #calc the kernel or transform data to a higher dimensional space    m,n = np.shape(X)    K = np.mat(np.zeros((m,1)))    if kTup[0]=='lin': K = X * A.T   #linear kernel    elif kTup[0]=='rbf':        for j in range(m):            deltaRow = X[j,:] - A            K[j] = deltaRow*deltaRow.T        K = np.exp(K/(-1*kTup[1]**2)) #divide in NumPy is element-wise not matrix like Matlab    else: raise NameError('Houston We Have a Problem -- That Kernel is not recognized')    return Kclass optStruct:    def __init__(self,dataMatIn, classLabels, C, toler, kTup):  # Initialize the structure with the parameters         self.X = dataMatIn        self.labelMat = classLabels        self.C = C        self.tol = toler        self.m = np.shape(dataMatIn)[0]        self.alphas = np.mat(np.zeros((self.m,1)))        self.b = 0        self.eCache = np.mat(np.zeros((self.m,2))) #first column is valid flag        self.K = np.mat(np.zeros((self.m,self.m)))        for i in range(self.m):            self.K[:,i] = kernelTrans(self.X, self.X[i,:], kTup)
"""def kernelTrans(X, A, kTup): #calc the kernel or transform data to a higher dimensional space    m,n = np.shape(X)    K = np.mat(np.zeros((m,1)))    if kTup[0]=='lin': K = X * A.T   #linear kernel    elif kTup[0]=='rbf':        for j in range(m):            deltaRow = X[j,:] - A            K[j] = deltaRow*deltaRow.T        K = np.exp(K/(-1*kTup[1]**2)) #divide in NumPy is element-wise not matrix like Matlab    else: raise NameError('Houston We Have a Problem -- \That Kernel is not recognized')    return Kdef smoP(dataMatIn, classLabels, C, toler, maxIter,kTup=('lin', 0)):    #full Platt SMO    oS = optStructK(np.mat(dataMatIn),np.mat(classLabels).transpose(),C,toler, kTup)    iter = 0    entireSet = True; alphaPairsChanged = 0    while (iter < maxIter) and ((alphaPairsChanged > 0) or (entireSet)):        alphaPairsChanged = 0        if entireSet:   #go over all            for i in range(oS.m):                        alphaPairsChanged += innerLK(i,oS)                print "fullSet, iter: %d i:%d, pairs changed %d" % (iter,i,alphaPairsChanged)            iter += 1        else:#go over non-bound (railed) alphas            nonBoundIs = np.nonzero((oS.alphas.A > 0) * (oS.alphas.A < C))[0]            for i in nonBoundIs:                alphaPairsChanged += innerLK(i,oS)                print "non-bound, iter: %d i:%d, pairs changed %d" % (iter,i,alphaPairsChanged)            iter += 1        if entireSet: entireSet = False #toggle entire set loop        elif (alphaPairsChanged == 0): entireSet = True          print "iteration number: %d" % iter    return oS.b,oS.alphasdef testRbf(k1=1.3):    dataArr,labelArr = loadDataSet('testSetRBF.txt')    #print np.shape(dataArr)    b,alphas = smoP(dataArr, labelArr, 200, 0.0001, 10000, ('rbf', k1)) #C=200 important    datMat=np.mat(dataArr); labelMat = np.mat(labelArr).transpose()    svInd=np.nonzero(alphas.A>0)[0]    sVs=datMat[svInd] #get matrix of only support vectors    labelSV = labelMat[svInd];    print "there are %d Support Vectors" % np.shape(sVs)[0]    m,n = np.shape(datMat)    errorCount = 0    for i in range(m):        kernelEval = kernelTrans(sVs,datMat[i,:],('rbf', k1))        predict=kernelEval.T * np.multiply(labelSV,alphas[svInd]) + b        if np.sign(predict)!=np.sign(labelArr[i]): errorCount += 1    print "the training error rate is: %f" % (float(errorCount)/m)    dataArr,labelArr = loadDataSet('testSetRBF2.txt')    errorCount = 0    datMat=np.mat(dataArr); labelMat = np.mat(labelArr).transpose()    m,n = np.shape(datMat)    for i in range(m):        kernelEval = kernelTrans(sVs,datMat[i,:],('rbf', k1))        predict=kernelEval.T * np.multiply(labelSV,alphas[svInd]) + b        if np.sign(predict)!=np.sign(labelArr[i]): errorCount += 1        print "the test error rate is: %f" % (float(errorCount)/m) if __name__ == '__main__':    dataArr,labelArr = loadDataSet('testSet.txt')    #b, alphas = smoPK(dataArr,labelArr,0.6 ,0.001,40)    testRbf()    #print b,alphas[alphas>0]